#!/usr/bin/env bash

set -e

install_julia(){
    local install_type version install_path version_trim tmp_download_dir url
    local volume_path source_path
    install_type=$1
    version=$2
    install_path=$3
    version_trim=${version%.*}
    tmp_download_dir="$(mktemp -d -t asdf-julia.XXX)"

    if [ "version" != "$install_type" ]; then 
        echo "Source builds aren't currently supported"
    fi

    if [[ "$(uname)" == "Darwin" ]]; then
        url="https://julialang-s3.julialang.org/bin/mac/x64/$version_trim/julia-$version-mac64.dmg"
        curl "$url" --create-dirs -so "$tmp_download_dir/julia.dmg"

        volume_path=$(hdiutil mount "$tmp_download_dir/julia.dmg" \
                          | grep Volume                           \
                          | grep -E -o '/Volumes[^\n]+')

        # find all directories in the new volume, redirect the errors so they
        # don't interfere with the grep
        source_path=$(find "$volume_path" -type d -print 2> /dev/null \
                          | grep 'Contents/Resources/julia$'          \
                          | head -n 1)

        cp -R "$source_path" "$install_path"
        hdiutil unmount "$volume_path"
        exit 0
    fi

    url="https://julialang-s3.julialang.org/bin/linux/x64/$version_trim/julia-$version-linux-x86_64.tar.gz"
    (
        cd "$tmp_download_dir"
        curl "$url" -so julia.tar.gz
        tar -xf julia.tar.gz
        mv "julia-$version/"* "$install_path"
    )
    rm -rf "$tmp_download_dir"
}

install_julia "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
